import Redis from "ioredis";
import { Query } from "./Query";
import { RoomData } from "./RoomData";
class RedisDriver {
  _client;
  constructor(options, key = "roomcaches") {
    this._client = new Redis(options);
  }
  createInstance(initialValues = {}) {
    return new RoomData(initialValues, this._client);
  }
  async find(conditions) {
    const rooms = await this.getRooms();
    return rooms.filter((room) => {
      if (!room.roomId) {
        return false;
      }
      for (const field in conditions) {
        if (conditions.hasOwnProperty(field) && room[field] !== conditions[field]) {
          return false;
        }
      }
      return true;
    });
  }
  findOne(conditions) {
    return new Query(this.getRooms(), conditions);
  }
  async getRooms() {
    return Object.entries(await this._client.hgetall("roomcaches") ?? []).map(
      ([, roomcache]) => new RoomData(JSON.parse(roomcache), this._client)
    );
  }
  async shutdown() {
    await this._client.quit();
  }
  clear() {
    this._client.del("roomcaches");
  }
}
export {
  RedisDriver
};
