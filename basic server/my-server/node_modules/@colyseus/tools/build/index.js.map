{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import fs from \"fs\";\nimport os from \"os\";\nimport http from \"http\";\nimport path from \"path\";\nimport cors from \"cors\";\nimport express from \"express\";\nimport dotenv from \"dotenv\";\nimport { logger, Server, ServerOptions, Transport } from '@colyseus/core';\nimport { WebSocketTransport } from '@colyseus/ws-transport';\n\n// try to import uWebSockets-express compatibility layer.\nlet uWebSocketsExpressCompatibility: any;\ntry {\n  uWebSocketsExpressCompatibility = require('uwebsockets-express').default;\n} catch (e) {}\n\nconst envFilename = `.env.${process.env.NODE_ENV || \"development\"}`;\n\n// return the first .env path found\nconst envPath = [\n  path.resolve(path.dirname(require?.main?.filename || process.cwd()), \"..\", envFilename),\n  path.resolve(process.cwd(), envFilename)\n].find((envPath) => fs.existsSync(envPath));\n\nif (envPath) {\n    dotenv.config({ path: envPath });\n    logger.info(`\u2705 ${envFilename} loaded.`);\n} else {\n    logger.info(`\u26A0\uFE0F  ${envFilename} not found.`);\n}\n\nexport interface ConfigOptions {\n    options?: ServerOptions,\n    displayLogs?: boolean,\n    getId?: () => string,\n    initializeTransport?: (options: any) => Transport,\n    initializeExpress?: (app: express.Express) => void,\n    initializeGameServer?: (app: Server) => void,\n    beforeListen?: () => void,\n}\n\nconst ALLOWED_KEYS: { [key in keyof ConfigOptions]: string } = {\n  'displayLogs': \"boolean\",\n  'options': \"object\",\n  'getId': \"function\",\n  'initializeTransport': \"function\",\n  'initializeExpress': \"function\",\n  'initializeGameServer': \"function\",\n  'beforeListen': \"function\"\n};\n\nexport default function (options: ConfigOptions) {\n  for (const option in options) {\n    if (!ALLOWED_KEYS[option]) {\n      throw new Error(`\u274C Invalid option '${option}'. Allowed options are: ${Object.keys(ALLOWED_KEYS).join(\", \")}`);\n    }\n    if(typeof(options[option]) !== ALLOWED_KEYS[option]) {\n      throw new Error(`\u274C Invalid type for ${option}: please provide a ${ALLOWED_KEYS[option]} value.`);\n    }\n  }\n\n  return options;\n}\n\n/**\n * Listen on your development environment\n * @param options Application options\n * @param port Port number to bind Colyseus + Express\n */\nexport async function listen(\n    options: ConfigOptions,\n    port: number = Number(process.env.PORT || 2567),\n) {\n    const serverOptions = options.options || {};\n    options.displayLogs = options.displayLogs ?? true;\n\n    // Force 2567 port on Colyseus Cloud\n    if (process.env.COLYSEUS_CLOUD !== undefined) {\n        port = 2567;\n    }\n\n    //\n    // Handling multiple processes\n    // Use NODE_APP_INSTANCE to play nicely with pm2\n    //\n    const processNumber = Number(process.env.NODE_APP_INSTANCE || \"0\");\n    port += processNumber;\n\n    // automatically configure for production under Colyseus Cloud\n    if (process.env.COLYSEUS_CLOUD !== undefined) {\n        // special configuration is required when using multiple processes\n        const isMultiProcess = (os.cpus().length > 1);\n\n        if (!serverOptions.driver && isMultiProcess) {\n            let RedisDriver: any = undefined;\n            try {\n                RedisDriver = require('@colyseus/redis-driver').RedisDriver;\n                serverOptions.driver = new RedisDriver();\n            } catch (e) {\n                logger.warn(\"\");\n                logger.warn(\"\u274C coult not initialize RedisDriver.\");\n                logger.warn(\"\uD83D\uDC49 npm install --save @colyseus/redis-driver\");\n                logger.warn(\"\");\n            }\n        }\n\n        if (!serverOptions.presence && isMultiProcess) {\n            let RedisPresence: any = undefined;\n            try {\n                RedisPresence = require('@colyseus/redis-presence').RedisPresence;\n                serverOptions.presence = new RedisPresence();\n            } catch (e) {\n                logger.warn(\"\");\n                logger.warn(\"\u274C coult not initialize RedisPresence.\");\n                logger.warn(\"\uD83D\uDC49 npm install --save @colyseus/redis-presence\");\n                logger.warn(\"\");\n            }\n        }\n\n        // force \"publicAddress\" when deployed on \"Colyseus Cloud\".\n        serverOptions.publicAddress = process.env.SUBDOMAIN + \".\" + process.env.SERVER_NAME;\n\n        // nginx is responsible for forwarding /{port}/ to this process\n        if (isMultiProcess) {\n            serverOptions.publicAddress += \"/\" + port;\n        }\n    }\n\n    const transport = await getTransport(options);\n    const gameServer = new Server({\n        ...serverOptions,\n        transport,\n    });\n    await options.initializeGameServer?.(gameServer);\n    await options.beforeListen?.();\n\n\n    if (process.env.COLYSEUS_CLOUD !== undefined) {\n        // listening on socket\n        // @ts-ignore\n        await gameServer.listen(`/run/colyseus/${port}.sock`);\n\n    } else {\n        // listening on port\n        await gameServer.listen(port);\n    }\n\n    // notify process manager (production)\n    if (typeof(process.send) === \"function\") {\n        process.send('ready');\n    }\n\n    if (options.displayLogs) {\n        logger.info(`\u2694\uFE0F  Listening on ws://localhost:${port}`);\n    }\n    return gameServer;\n}\n\n\nexport async function getTransport(options: ConfigOptions) {\n    let transport: Transport;\n\n    if (!options.initializeTransport) {\n        // use WebSocketTransport by default\n        options.initializeTransport = (options: any) => new WebSocketTransport(options);\n    }\n\n    let app: express.Express | undefined = express();\n    let server = http.createServer(app);\n\n    transport = await options.initializeTransport({ server });\n\n    if (options.initializeExpress) {\n        // uWebSockets.js + Express compatibility layer.\n        // @ts-ignore\n        if (transport['app']) {\n            if (typeof (uWebSocketsExpressCompatibility) === \"function\") {\n                if (options.displayLogs){\n                  logger.info(\"\u2705 uWebSockets.js + Express compatibility enabled\");\n                }\n\n                // @ts-ignore\n                server = undefined;\n                // @ts-ignore\n                app = uWebSocketsExpressCompatibility(transport['app']);\n\n            } else {\n                if (options.displayLogs) {\n                    logger.warn(\"\");\n                    logger.warn(\"\u274C uWebSockets.js + Express compatibility mode couldn't be loaded, run the following command to fix:\");\n                    logger.warn(\"\uD83D\uDC49 npm install --save uwebsockets-express\");\n                    logger.warn(\"\");\n                }\n                app = undefined;\n            }\n        }\n\n        if (app) {\n            // Enable CORS + JSON parsing.\n            app.use(cors());\n            app.use(express.json());\n\n            await options.initializeExpress(app);\n\n            if (options.displayLogs) {\n                logger.info(\"\u2705 Express initialized\");\n            }\n        }\n    }\n\n    return transport;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,gBAAe;AACf,kBAAiB;AACjB,kBAAiB;AACjB,kBAAiB;AACjB,qBAAoB;AACpB,oBAAmB;AACnB,kBAAyD;AACzD,0BAAmC;AAGnC,IAAI;AACJ,IAAI;AACF,oCAAkC,QAAQ,qBAAqB,EAAE;AACnE,SAAS,GAAP;AAAW;AAEb,MAAM,cAAc,QAAQ,QAAQ,IAAI,YAAY;AAGpD,MAAM,UAAU;AAAA,EACd,YAAAA,QAAK,QAAQ,YAAAA,QAAK,QAAQ,SAAS,MAAM,YAAY,QAAQ,IAAI,CAAC,GAAG,MAAM,WAAW;AAAA,EACtF,YAAAA,QAAK,QAAQ,QAAQ,IAAI,GAAG,WAAW;AACzC,EAAE,KAAK,CAACC,aAAY,UAAAC,QAAG,WAAWD,QAAO,CAAC;AAE1C,IAAI,SAAS;AACT,gBAAAE,QAAO,OAAO,EAAE,MAAM,QAAQ,CAAC;AAC/B,qBAAO,KAAK,UAAK,qBAAqB;AAC1C,OAAO;AACH,qBAAO,KAAK,iBAAO,wBAAwB;AAC/C;AAYA,MAAM,eAAyD;AAAA,EAC7D,eAAe;AAAA,EACf,WAAW;AAAA,EACX,SAAS;AAAA,EACT,uBAAuB;AAAA,EACvB,qBAAqB;AAAA,EACrB,wBAAwB;AAAA,EACxB,gBAAgB;AAClB;AAEe,SAAR,YAAkB,SAAwB;AAC/C,aAAW,UAAU,SAAS;AAC5B,QAAI,CAAC,aAAa,SAAS;AACzB,YAAM,IAAI,MAAM,0BAAqB,iCAAiC,OAAO,KAAK,YAAY,EAAE,KAAK,IAAI,GAAG;AAAA,IAC9G;AACA,QAAG,OAAO,QAAQ,YAAa,aAAa,SAAS;AACnD,YAAM,IAAI,MAAM,2BAAsB,4BAA4B,aAAa,gBAAgB;AAAA,IACjG;AAAA,EACF;AAEA,SAAO;AACT;AAOA,eAAsB,OAClB,SACA,OAAe,OAAO,QAAQ,IAAI,QAAQ,IAAI,GAChD;AACE,QAAM,gBAAgB,QAAQ,WAAW,CAAC;AAC1C,UAAQ,cAAc,QAAQ,eAAe;AAG7C,MAAI,QAAQ,IAAI,mBAAmB,QAAW;AAC1C,WAAO;AAAA,EACX;AAMA,QAAM,gBAAgB,OAAO,QAAQ,IAAI,qBAAqB,GAAG;AACjE,UAAQ;AAGR,MAAI,QAAQ,IAAI,mBAAmB,QAAW;AAE1C,UAAM,iBAAkB,UAAAC,QAAG,KAAK,EAAE,SAAS;AAE3C,QAAI,CAAC,cAAc,UAAU,gBAAgB;AACzC,UAAI,cAAmB;AACvB,UAAI;AACA,sBAAc,QAAQ,wBAAwB,EAAE;AAChD,sBAAc,SAAS,IAAI,YAAY;AAAA,MAC3C,SAAS,GAAP;AACE,2BAAO,KAAK,EAAE;AACd,2BAAO,KAAK,0CAAqC;AACjD,2BAAO,KAAK,qDAA8C;AAC1D,2BAAO,KAAK,EAAE;AAAA,MAClB;AAAA,IACJ;AAEA,QAAI,CAAC,cAAc,YAAY,gBAAgB;AAC3C,UAAI,gBAAqB;AACzB,UAAI;AACA,wBAAgB,QAAQ,0BAA0B,EAAE;AACpD,sBAAc,WAAW,IAAI,cAAc;AAAA,MAC/C,SAAS,GAAP;AACE,2BAAO,KAAK,EAAE;AACd,2BAAO,KAAK,4CAAuC;AACnD,2BAAO,KAAK,uDAAgD;AAC5D,2BAAO,KAAK,EAAE;AAAA,MAClB;AAAA,IACJ;AAGA,kBAAc,gBAAgB,QAAQ,IAAI,YAAY,MAAM,QAAQ,IAAI;AAGxE,QAAI,gBAAgB;AAChB,oBAAc,iBAAiB,MAAM;AAAA,IACzC;AAAA,EACJ;AAEA,QAAM,YAAY,MAAM,aAAa,OAAO;AAC5C,QAAM,aAAa,IAAI,mBAAO;AAAA,IAC1B,GAAG;AAAA,IACH;AAAA,EACJ,CAAC;AACD,QAAM,QAAQ,uBAAuB,UAAU;AAC/C,QAAM,QAAQ,eAAe;AAG7B,MAAI,QAAQ,IAAI,mBAAmB,QAAW;AAG1C,UAAM,WAAW,OAAO,iBAAiB,WAAW;AAAA,EAExD,OAAO;AAEH,UAAM,WAAW,OAAO,IAAI;AAAA,EAChC;AAGA,MAAI,OAAO,QAAQ,SAAU,YAAY;AACrC,YAAQ,KAAK,OAAO;AAAA,EACxB;AAEA,MAAI,QAAQ,aAAa;AACrB,uBAAO,KAAK,6CAAmC,MAAM;AAAA,EACzD;AACA,SAAO;AACX;AAGA,eAAsB,aAAa,SAAwB;AACvD,MAAI;AAEJ,MAAI,CAAC,QAAQ,qBAAqB;AAE9B,YAAQ,sBAAsB,CAACC,aAAiB,IAAI,uCAAmBA,QAAO;AAAA,EAClF;AAEA,MAAI,UAAmC,eAAAC,SAAQ;AAC/C,MAAI,SAAS,YAAAC,QAAK,aAAa,GAAG;AAElC,cAAY,MAAM,QAAQ,oBAAoB,EAAE,OAAO,CAAC;AAExD,MAAI,QAAQ,mBAAmB;AAG3B,QAAI,UAAU,QAAQ;AAClB,UAAI,OAAQ,oCAAqC,YAAY;AACzD,YAAI,QAAQ,aAAY;AACtB,6BAAO,KAAK,uDAAkD;AAAA,QAChE;AAGA,iBAAS;AAET,cAAM,gCAAgC,UAAU,MAAM;AAAA,MAE1D,OAAO;AACH,YAAI,QAAQ,aAAa;AACrB,6BAAO,KAAK,EAAE;AACd,6BAAO,KAAK,0GAAqG;AACjH,6BAAO,KAAK,kDAA2C;AACvD,6BAAO,KAAK,EAAE;AAAA,QAClB;AACA,cAAM;AAAA,MACV;AAAA,IACJ;AAEA,QAAI,KAAK;AAEL,UAAI,QAAI,YAAAC,SAAK,CAAC;AACd,UAAI,IAAI,eAAAF,QAAQ,KAAK,CAAC;AAEtB,YAAM,QAAQ,kBAAkB,GAAG;AAEnC,UAAI,QAAQ,aAAa;AACrB,2BAAO,KAAK,4BAAuB;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AAEA,SAAO;AACX;",
  "names": ["path", "envPath", "fs", "dotenv", "os", "options", "express", "http", "cors"]
}
